{"/home/travis/build/npmtest/node-npmtest-dnn/test.js":"/* istanbul instrument in package npmtest_dnn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dnn/lib.npmtest_dnn.js":"/* istanbul instrument in package npmtest_dnn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dnn = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dnn = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dnn/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dnn && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dnn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dnn\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dnn.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_dnn.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dnn.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_dnn.__dirname + '/lib.npmtest_dnn.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dnn/node_modules/dnn/lib/dnn.js":"/**\n * Created by joonkukang on 2014. 1. 12..\n */\ndnn = module.exports;\n\ndnn.RBM = require('./RBM');\n\ndnn.LogisticRegression = require('./LogisticRegression');\n\ndnn.DBN = require('./DBN');\n\ndnn.CRBM = require('./CRBM');\n\ndnn.CDBN = require('./CDBN');\n\ndnn.MLP = require('./MLP');","/home/travis/build/npmtest/node-npmtest-dnn/node_modules/dnn/lib/RBM.js":"var math = require('./utils').math;\nRBM = module.exports = function (settings) {\n    var self = this;\n\n    self.nVisible = settings['n_visible'];\n    self.nHidden = settings['n_hidden'];\n    self.settings = {\n        'log level' : 1 // 0 : nothing, 1 : info, 2: warn\n    };\n\n    if(typeof settings['W'] === 'undefined') {\n        var a = 1. / self.nVisible;\n        settings['W'] = math.randMat(self.nVisible,self.nHidden,-a,a);\n    }\n\n    if(typeof settings['hbias'] === 'undefined')\n        settings['hbias'] = math.zeroVec(self.nHidden);\n\n    if(typeof settings['vbias'] === 'undefined')\n        settings['vbias'] = math.zeroVec(self.nVisible);\n\n    self.input = settings['input'];\n    self.W = settings['W'];\n    self.hbias = settings['hbias'];\n    self.vbias = settings['vbias'];\n}\n\nRBM.prototype.train = function(settings) {\n    var self = this;\n    var lr=0.8, k= 1, epochs = 1500; // default\n    if(typeof settings['input'] !== 'undefined')\n        self.input = settings['input'];\n    if(typeof settings['lr'] !== 'undefined')\n        lr = settings['lr'];\n    if(typeof settings['k'] !== 'undefined')\n        k = settings['k'];\n    if(typeof settings['epochs'] !== 'undefined')\n        epochs = settings['epochs'];\n\n    var i,j;\n    var currentProgress = 1;\n    for(i=0;i<epochs;i++) {\n        /* CD - k . Contrastive Divergence */\n        var ph = self.sampleHgivenV(self.input);\n        var phMean = ph[0], phSample = ph[1];\n        var chainStart = phSample;\n        var nvMeans, nvSamples, nhMeans, nhSamples;\n\n        for(j=0 ; j<k ; j++) {\n            if (j==0) {\n                var gibbsVH = self.gibbsHVH(chainStart);\n                nvMeans = gibbsVH[0], nvSamples = gibbsVH[1], nhMeans = gibbsVH[2], nhSamples = gibbsVH[3];\n            } else {\n                var gibbsVH = self.gibbsHVH(nhSamples);\n                nvMeans = gibbsVH[0], nvSamples = gibbsVH[1], nhMeans = gibbsVH[2], nhSamples = gibbsVH[3];\n            }\n        }\n\n        var deltaW = math.mulMatScalar(math.minusMat(math.mulMat(math.transpose(self.input),phMean), math.mulMat(math.transpose(nvSamples),nhMeans)),1. / self.input.length);\n        var deltaVbias = math.meanMatAxis(math.minusMat(self.input,nvSamples),0);\n        var deltaHbias = math.meanMatAxis(math.minusMat(phSample,nhMeans),0);\n\n        self.W = math.addMat(self.W, math.mulMatScalar(deltaW,lr));\n        self.vbias = math.addVec(self.vbias, math.mulVecScalar(deltaVbias,lr));\n        self.hbias = math.addVec(self.hbias, math.mulVecScalar(deltaHbias,lr));\n        if(self.settings['log level'] > 0) {\n            var progress = (1.*i/epochs)*100;\n            if(progress > currentProgress) {\n                console.log(\"RBM\",progress.toFixed(0),\"% Completed.\");\n                currentProgress+=8;\n            }\n        }\n    }\n    if(self.settings['log level'] > 0)\n        console.log(\"RBM Final Cross Entropy : \",self.getReconstructionCrossEntropy())\n};\n\nRBM.prototype.propup = function(v) {\n    var self = this;\n    var preSigmoidActivation = math.addMatVec(math.mulMat(v,self.W),self.hbias);\n    return math.activateMat(preSigmoidActivation, m.sigmoid);\n};\n\nRBM.prototype.propdown = function(h) {\n    var self = this;\n    var preSigmoidActivation = math.addMatVec(math.mulMat(h,math.transpose(self.W)),self.vbias);\n    return math.activateMat(preSigmoidActivation, m.sigmoid);\n};\n\nRBM.prototype.sampleHgivenV = function(v0_sample) {\n    var self = this;\n    var h1_mean = self.propup(v0_sample);\n    var h1_sample = math.probToBinaryMat(h1_mean);\n    return [h1_mean,h1_sample];\n};\n\nRBM.prototype.sampleVgivenH = function(h0_sample) {\n    var self = this;\n    var v1_mean = self.propdown(h0_sample);\n    var v1_sample = math.probToBinaryMat(v1_mean);\n    return [v1_mean,v1_sample];\n};\n\nRBM.prototype.gibbsHVH = function(h0_sample) {\n    var self = this;\n    var v1 = self.sampleVgivenH(h0_sample);\n    var h1 = self.sampleHgivenV(v1[1]);\n    return [v1[0],v1[1],h1[0],h1[1]];\n};\n\nRBM.prototype.reconstruct = function(v) {\n    var self = this;\n    var h = math.activateMat(math.addMatVec(math.mulMat(v,self.W),self.hbias), math.sigmoid);\n    var reconstructedV = math.activateMat(math.addMatVec(math.mulMat(h,math.transpose(self.W)),self.vbias), math.sigmoid);\n    return reconstructedV;\n};\n\nRBM.prototype.getReconstructionCrossEntropy = function() {\n    var self = this;\n    var reconstructedV = self.reconstruct(self.input);\n    var a = math.activateTwoMat(self.input,reconstructedV,function(x,y){\n        return x*Math.log(y);\n    });\n\n    var b = math.activateTwoMat(self.input,reconstructedV,function(x,y){\n        return (1-x)*Math.log(1-y);\n    });\n\n    var crossEntropy = -math.meanVec(math.sumMatAxis(math.addMat(a,b),1));\n    return crossEntropy\n\n};\nRBM.prototype.set = function(property,value) {\n    var self = this;\n    self.settings[property] = value;\n}","/home/travis/build/npmtest/node-npmtest-dnn/node_modules/dnn/lib/utils.js":"/**\n * Created by joonkukang on 2014. 1. 12..\n */\nutils = module.exports;\n\nutils.math = require('./math');\n/*\n\nutils.log = function(message,logLevel,type) {\n    // log level. 0 : nothing, 1 : info, 2 : warning\n    if(logLevel == 1 && type === 'info') {\n        console.log(message);\n    } else if(logLevel == 2) {\n        if(type === 'info')\n            console.log(message);\n        else if (type === 'warning')\n            console.warn(message);\n    }\n\n}*/","/home/travis/build/npmtest/node-npmtest-dnn/node_modules/dnn/lib/math.js":"/**\n * Created by joonkukang on 2014. 1. 12..\n */\nm = module.exports;\n\nm.randn = function() {\n    // generate random guassian distribution number. (mean : 0, standard deviation : 1)\n    var v1, v2, s;\n\n    do {\n        v1 = 2 * Math.random() - 1;   // -1.0 ~ 1.0 까지의 값\n        v2 = 2 * Math.random() - 1;   // -1.0 ~ 1.0 까지의 값\n        s = v1 * v1 + v2 * v2;\n    } while (s >= 1 || s == 0);\n\n    s = Math.sqrt( (-2 * Math.log(s)) / s );\n    return v1 * s;\n}\n\nm.shape = function(mat) {\n    var row = mat.length;\n    var col = mat[0].length;\n    return [row,col];\n};\n\nm.addVec = function(vec1, vec2) {\n    if(vec1.length === vec2.length) {\n        var result = [];\n        var i;\n        for(i=0;i<vec1.length;i++)\n            result.push(vec1[i]+vec2[i]);\n        return result;\n    } else {\n        throw new Error(\"Length Error : not same.\")\n    }\n}\n\nm.minusVec = function(vec1,vec2) {\n    if(vec1.length === vec2.length) {\n        var result = [];\n        var i;\n        for(i=0;i<vec1.length;i++)\n            result.push(vec1[i]-vec2[i]);\n        return result;\n    } else {\n        throw new Error(\"Length Error : not same.\")\n    }\n};\n\nm.addMatScalar = function(mat,scalar) {\n    var row = m.shape(mat)[0];\n    var col = m.shape(mat)[1];\n    var i , j,result = [];\n    for(i=0 ; i<row ; i++) {\n        var rowVec = [];\n        for(j=0 ; j<col ; j++) {\n            rowVec.push(mat[i][j] + scalar);\n        }\n        result.push(rowVec);\n    }\n    return result;\n}\n\nm.addMatVec = function(mat,vec) {\n    if(mat[0].length === vec.length) {\n        var result = [];\n        var i;\n        for(i=0;i<mat.length;i++)\n            result.push(m.addVec(mat[i],vec));\n        return result;\n    } else {\n        throw new Error(\"Length Error : not same.\")\n    }\n}\n\nm.minusMatVec = function(mat,vec) {\n    if(mat[0].length === vec.length) {\n        var result = [];\n        var i;\n        for(i=0;i<mat.length;i++)\n            result.push(m.minusVec(mat[i],vec));\n        return result;\n    } else {\n        throw new Error(\"Length Error : not same.\")\n    }\n}\n\nm.addMat = function (mat1, mat2) {\n    if ((mat1.length === mat2.length) && (mat1[0].length === mat2[0].length)) {\n        var result = new Array(mat1.length);\n        for (var i = 0; i < mat1.length; i++) {\n            result[i] = new Array(mat1[i].length);\n            for (var j = 0; j < mat1[i].length; j++) {\n                result[i][j] = mat1[i][j] + mat2[i][j];\n            }\n        }\n        return result;\n    } else {\n        throw new Error('Matrix mismatch.');\n    }\n};\n\nm.minusMat = function(mat1, mat2) {\n    if ((mat1.length === mat2.length) && (mat1[0].length === mat2[0].length)) {\n        var result = new Array(mat1.length);\n        for (var i = 0; i < mat1.length; i++) {\n            result[i] = new Array(mat1[i].length);\n            for (var j = 0; j < mat1[i].length; j++) {\n                result[i][j] = mat1[i][j] - mat2[i][j];\n            }\n        }\n        return result;\n    } else {\n        throw new Error('Matrix mismatch.');\n    }\n}\n\nm.transpose = function (mat) {\n    var result = new Array(mat[0].length);\n    for (var i = 0; i < mat[0].length; i++) {\n        result[i] = new Array(mat.length);\n        for (var j = 0; j < mat.length; j++) {\n            result[i][j] = mat[j][i];\n        }\n    }\n    return result;\n};\n\nm.dotVec = function (vec1, vec2) {\n    if (vec1.length === vec2.length) {\n        var result = 0;\n        for (var i = 0; i < vec1.length; i++) {\n            result += vec1[i] * vec2[i];\n        }\n        return result;\n    } else {\n        throw new Error(\"Vector mismatch\");\n    }\n};\n\nm.outerVec = function (vec1,vec2) {\n    var mat1 = m.transpose([vec1]);\n    var mat2 = [vec2];\n    return m.mulMat(mat1,mat2);\n};\n\nm.mulVecScalar = function(vec,scalar) {\n    var i, result = [];\n    for(i=0;i<vec.length;i++)\n        result.push(vec[i]*scalar);\n    return result;\n};\n\nm.mulMatScalar = function(mat,scalar) {\n    var row = m.shape(mat)[0];\n    var col = m.shape(mat)[1];\n    var i , j,result = [];\n    for(i=0 ; i<row ; i++) {\n        var rowVec = [];\n        for(j=0 ; j<col ; j++) {\n            rowVec.push(mat[i][j] * scalar);\n        }\n        result.push(rowVec);\n    }\n    return result;\n};\n\nm.mulMatElementWise = function(mat1, mat2) {\n    if (mat1.length === mat2.length && mat1[0].length === mat2[0].length) {\n        var result = new Array(mat1.length);\n\n        for (var x = 0; x < mat1.length; x++) {\n            result[x] = new Array(mat1[0].length);\n        }\n\n        for (var i = 0; i < result.length; i++) {\n            for (var j = 0; j < result[i].length; j++) {\n                result[i][j] = mat1[i][j] * mat2[i][j]\n            }\n        }\n        return result;\n    } else {\n        throw new Error(\"Matrix shape error : not same\");\n    }\n};\n\nm.mulMat = function (mat1, mat2) {\n    if (mat1[0].length === mat2.length) {\n        var result = new Array(mat1.length);\n\n        for (var x = 0; x < mat1.length; x++) {\n            result[x] = new Array(mat2[0].length);\n        }\n\n\n        var mat2_T = m.transpose(mat2);\n        for (var i = 0; i < result.length; i++) {\n            for (var j = 0; j < result[i].length; j++) {\n                result[i][j] = m.dotVec(mat1[i],mat2_T[j]);\n            }\n        }\n        return result;\n    } else {\n        throw new Error(\"Array mismatch\");\n    }\n};\n\nm.sumVec = function(vec) {\n    var sum = 0;\n    var i = vec.length;\n    while (i--) {\n        sum += vec[i];\n    }\n    return sum;\n};\n\nm.sumMat = function(mat) {\n    var sum = 0;\n    var i = mat.length;\n    while (i--) {\n        for(var j=0;j<mat[0].length;j++)\n          sum += mat[i][j];\n    }\n    return sum;\n};\n\nm.sumMatAxis = function(mat,axis) {\n    // default axis 0;\n    // axis 0 : mean of col vector . axis 1 : mean of row vector\n    if(axis === 1) {\n        var row = m.shape(mat)[0];\n        var i ;\n        var result = [];\n        for(i=0 ; i<row; i++)\n            result.push(m.sumVec(mat[i]));\n        return result;\n    } else {\n        mat_T = m.transpose(mat);\n        return m.sumMatAxis(mat_T,1);\n    }\n};\n\nm.meanVec = function(vec) {\n    return 1. * m.sumVec(vec) / vec.length;\n};\n\nm.meanMat = function(mat) {\n    var row = mat.length;\n    var col = mat[0].length;\n    return 1. * m.sumMat(mat) / (row * col);\n};\n\nm.meanMatAxis = function(mat,axis) {\n    // default axis 0;\n    // axis 0 : mean of col vector . axis 1 : mean of row vector\n    if(axis === 1) {\n        var row = m.shape(mat)[0];\n        var i ;\n        var result = [];\n        for(i=0 ; i<row; i++)\n            result.push(m.meanVec(mat[i]));\n        return result;\n    } else {\n        mat_T = m.transpose(mat);\n        return m.meanMatAxis(mat_T,1);\n    }\n};\n\nm.squareVec = function(vec) {\n    var squareVec = [];\n    var i;\n    for(i=0;i<vec.length;i++) {\n        squareVec.push(vec[i]*vec[i]);\n    }\n    return squareVec;\n};\n\nm.squareMat = function(mat) {\n    var squareMat = [];\n    var i;\n    for(i=0;i<mat.length;i++) {\n        squareMat.push(m.squareVec(mat[i]));\n    }\n    return squareMat;\n};\n\nm.minVec = function(vec) {\n    var min = vec[0];\n    var i = vec.length;\n    while (i--) {\n        if (vec[i] < min)\n            min = vec[i];\n    }\n    return min;\n};\n\nm.maxVec = function(vec) {\n    var max = vec[0];\n    var i = vec.length;\n    while (i--) {\n        if (vec[i] > max)\n            max = vec[i];\n    }\n    return max;\n}\n\nm.minMat = function(mat) {\n    var min = mat[0][0];\n    var i = mat.length;\n    while (i--) {\n        for(var j=0;j<mat[0].length;j++) {\n            if(mat[i][j] < min)\n                min = mat[i][j];\n        }\n    }\n    return min;\n};\n\nm.maxMat = function(mat) {\n    var max = mat[0][0];\n    var i = mat.length;\n    while (i--) {\n        for(var j=0;j<mat[0].length;j++) {\n            if(mat[i][j] < max)\n                max = mat[i][j];\n        }\n    }\n    return max;\n};\n\nm.zeroVec = function(n) {\n    var vec = [];\n    while(vec.length < n)\n        vec.push(0);\n    return vec;\n};\n\nm.zeroMat = function(row,col) {\n    var mat = [];\n    while(mat.length < row)\n        mat.push(m.zeroVec(col));\n    return mat;\n};\n\nm.oneVec = function(n) {\n    var vec = [];\n    while(vec.length < n)\n        vec.push(1);\n    return vec;\n};\n\nm.oneMat = function(row,col) {\n    var mat = [];\n    while(mat.length < row)\n        mat.push(m.oneVec(col));\n    return mat;\n};\n\nm.randVec = function(n,lower,upper) {\n    lower = (typeof lower !== 'undefined') ? lower : 0;\n    upper = (typeof upper !== 'undefined') ? upper : 1;\n    var vec = [];\n    while(vec.length < n)\n        vec.push(lower + (upper-lower) * Math.random());\n    return vec;\n};\n\nm.randMat = function(row,col,lower,upper) {\n    lower = (typeof lower !== 'undefined') ? lower : 0;\n    upper = (typeof upper !== 'undefined') ? upper : 1;\n    var mat = [];\n    while(mat.length < row)\n        mat.push(m.randVec(col,lower,upper));\n    return mat;\n};\n\nm.randnVec = function(n,mean,sigma) {\n    var vec = [];\n    while(vec.length < n)\n        vec.push(mean+sigma* m.randn());\n    return vec;\n};\n\nm.randnMat = function(row,col,mean,sigma) {\n    var mat = [];\n    while(mat.length < row)\n        mat.push(m.randnVec(col,mean,sigma));\n    return mat;\n};\n\nm.identity = function (n) {\n    var result = new Array(n);\n\n    for (var i = 0; i < n ; i++) {\n        result[i] = new Array(n);\n        for (var j = 0; j < n; j++) {\n            result[i][j] = (i === j) ? 1 : 0;\n        }\n    }\n\n    return result;\n};\n\nm.sigmoid = function(x) {\n    var sigmoid = (1. / (1 + Math.exp(-x)))\n    if(sigmoid ==1) {\n     //   console.warn(\"Something Wrong!! Sigmoid Function returns 1. Probably javascript float precision problem?\\nSlightly Controlled value to 1 - 1e-14\")\n        sigmoid = 0.99999999999999; // Javascript Float Precision Problem.. This is a limit of javascript.\n    } else if(sigmoid ==0) {\n      //  console.warn(\"Something Wrong!! Sigmoid Function returns 0. Probably javascript float precision problem?\\nSlightly Controlled value to 1e-14\")\n        sigmoid = 1e-14;\n    }\n    return sigmoid; // sigmoid cannot be 0 or 1;;\n};\n\nm.dSigmoid = function(x){\n    a = m.sigmoid(x);\n    return a * (1. - a);\n};\n\nm.probToBinaryMat = function(mat) {\n    var row = m.shape(mat)[0];\n    var col = m.shape(mat)[1];\n    var i,j;\n    var result = [];\n\n    for(i=0;i<row;i++) {\n        var rowVec = [];\n        for(j=0;j<col;j++) {\n            if(Math.random() < mat[i][j])\n                rowVec.push(1);\n            else\n                rowVec.push(0);\n        }\n        result.push(rowVec);\n    }\n    return result;\n};\n\nm.activateVec = function(vec,activation) {\n    var i, result = [];\n    for(i=0;i<vec.length;i++)\n        result.push(activation(vec[i]));\n    return result;\n};\n\nm.activateMat = function(mat,activation) {\n    var row = m.shape(mat)[0];\n    var col = m.shape(mat)[1];\n    var i, j,result = [];\n    for(i=0;i<row;i++) {\n        var rowVec = [];\n        for(j=0;j<col;j++)\n            rowVec.push(activation(mat[i][j]));\n        result.push(rowVec);\n    }\n    return result;\n};\n\nm.activateTwoVec = function(vec1, vec2,activation) {\n    if (vec1.length === vec2.length) {\n        var result = new Array(vec1.length);\n        for (var i = 0; i < result.length; i++) {\n            result[i] = activation(vec1[i],vec2[i]);\n        }\n        return result;\n    } else {\n        throw new Error(\"Matrix shape error : not same\");\n    }\n};\n\nm.activateTwoMat = function(mat1, mat2,activation) {\n    if (mat1.length === mat2.length && mat1[0].length === mat2[0].length) {\n        var result = new Array(mat1.length);\n\n        for (var x = 0; x < mat1.length; x++) {\n            result[x] = new Array(mat1[0].length);\n        }\n\n        for (var i = 0; i < result.length; i++) {\n            for (var j = 0; j < result[i].length; j++) {\n                result[i][j] = activation(mat1[i][j],mat2[i][j]);\n            }\n        }\n        return result;\n    } else {\n        throw new Error(\"Matrix shape error : not same\");\n    }\n};\n\nm.fillVec = function(n,value) {\n    var vec = [];\n    while(vec.length < n)\n        vec.push(value);\n    return vec;\n};\n\nm.fillMat = function(row,col,value) {\n    var mat = [];\n    while(mat.length < row) {\n        var rowVec = [];\n        while(rowVec.length < col)\n            rowVec.push(value);\n        mat.push(rowVec);\n    }\n    return mat;\n};\n\nm.softmaxVec = function(vec) {\n    var max = m.maxVec(vec);\n    var preSoftmaxVec = m.activateVec(vec,function(x) {return Math.exp(x - max);})\n    return m.activateVec(preSoftmaxVec,function(x) {return x/ m.sumVec(preSoftmaxVec)})\n};\n\nm.softmaxMat = function(mat) {\n    var result=[], i;\n    for(i=0 ; i<mat.length ; i++)\n        result.push(m.softmaxVec(mat[i]));\n    return result;\n};\n\n\n\n// For CRBM\n/*\nm.phi = function(mat,vec,low,high) {\n    var i;\n    var result = [];\n    for(i=0;i<mat.length;i++) {\n        result.push(m.activateTwoVec(mat[i],vec,function(x,y){return low+(high-low)* m.sigmoid(x*y);}))\n    }\n    return result;\n}\n*/","/home/travis/build/npmtest/node-npmtest-dnn/node_modules/dnn/lib/LogisticRegression.js":"/**\n * Created by joonkukang on 2014. 1. 12..\n */\nvar math = require('./utils').math;\nLogisticRegression = module.exports = function (settings) {\n    var self = this;\n    self.x = settings['input'];\n    self.y = settings['label'];\n    self.W = math.zeroMat(settings['n_in'],settings['n_out']);\n    self.b = math.zeroVec(settings['n_out']);\n    self.settings = {\n        'log level' : 1 // 0 : nothing, 1 : info, 2: warn\n    };\n};\n\nLogisticRegression.prototype.train = function (settings) {\n    var self = this;\n    var lr = 0.1, epochs = 200;\n    if(typeof settings['input'] !== 'undefined')\n        self.x = settings['input'];\n    if(typeof settings['lr'] !== 'undefined')\n        lr = settings['lr'];\n    if(typeof settings['epochs'] !== 'undefined')\n        epochs = settings['epochs'];\n    var i;\n    var currentProgress = 1;\n    for(i=0;i<epochs;i++) {\n        var probYgivenX = math.softmaxMat(math.addMatVec(math.mulMat(self.x,self.W),self.b));\n        var deltaY = math.minusMat(self.y,probYgivenX);\n\n        var deltaW = math.mulMat(math.transpose(self.x),deltaY);\n        var deltaB = math.meanMatAxis(deltaY,0);\n\n        self.W = math.addMat(self.W,math.mulMatScalar(deltaW,lr));\n        self.b = math.addVec(self.b,math.mulVecScalar(deltaB,lr));\n        if(self.settings['log level'] > 0) {\n            var progress = (1.*i/epochs)*100;\n            if(progress > currentProgress) {\n                console.log(\"LogisticRegression\",progress.toFixed(0),\"% Completed.\");\n                currentProgress++;\n            }\n        }\n    }\n    if(self.settings['log level'] > 0)\n        console.log(\"LogisticRegression Final Cross Entropy : \",self.getReconstructionCrossEntropy());\n};\n\nLogisticRegression.prototype.getReconstructionCrossEntropy = function () {\n    var self = this;\n    var probYgivenX = math.softmaxMat(math.addMatVec(math.mulMat(self.x,self.W),self.b));\n    var a = math.mulMatElementWise(self.y, math.activateMat(probYgivenX,Math.log));\n    var b = math.mulMatElementWise(math.mulMatScalar(math.addMatScalar(self.y,-1),-1),\n        math.activateMat(math.mulMatScalar(math.addMatScalar(probYgivenX,-1),-1),Math.log));\n    var crossEntropy = -math.meanVec(math.sumMatAxis(math.addMat(a,b),1));\n    return crossEntropy;\n};\n\nLogisticRegression.prototype.predict = function (x) {\n    var self = this;\n    return math.softmaxMat(math.addMatVec(math.mulMat(x,self.W),self.b));\n};\n\nLogisticRegression.prototype.set = function(property,value) {\n    var self = this;\n    self.settings[property] = value;\n}","/home/travis/build/npmtest/node-npmtest-dnn/node_modules/dnn/lib/DBN.js":"/**\n * Created by joonkukang on 2014. 1. 13..\n */\nvar math = require('./utils').math;\nHiddenLayer = require('./HiddenLayer');\nRBM = require('./RBM');\nMLP = require('./MLP');\n\nDBN = module.exports = function (settings) {\n    var self = this;\n    self.x = settings['input'];\n    self.y = settings['label'];\n    self.sigmoidLayers = [];\n    self.rbmLayers = [];\n    self.nLayers = settings['hidden_layer_sizes'].length;\n    self.hiddenLayerSizes = settings['hidden_layer_sizes'];\n    self.nIns = settings['n_ins'];\n    self.nOuts = settings['n_outs'];\n    self.settings = {\n        'log level' : 1 // 0 : nothing, 1 : info, 2: warn\n    };\n\n    // Constructing Deep Neural Network\n    var i;\n    for(i=0 ; i<self.nLayers ; i++) {\n        var inputSize, layerInput;\n        if(i == 0)\n            inputSize = settings['n_ins'];\n        else\n            inputSize = settings['hidden_layer_sizes'][i-1];\n\n        if(i == 0)\n            layerInput = self.x;\n        else\n            layerInput = self.sigmoidLayers[self.sigmoidLayers.length-1].sampleHgivenV();\n\n        var sigmoidLayer = new HiddenLayer({\n            'input' : layerInput,\n            'n_in' : inputSize,\n            'n_out' : settings['hidden_layer_sizes'][i],\n            'activation' : math.sigmoid\n        });\n        self.sigmoidLayers.push(sigmoidLayer);\n\n        var rbmLayer = new RBM({\n            'input' : layerInput,\n            'n_visible' : inputSize,\n            'n_hidden' : settings['hidden_layer_sizes'][i]\n        });\n        self.rbmLayers.push(rbmLayer);\n    }\n    self.outputLayer = new HiddenLayer({\n        'input' : self.sigmoidLayers[self.sigmoidLayers.length-1].sampleHgivenV(),\n        'n_in' : settings['hidden_layer_sizes'][settings['hidden_layer_sizes'].length - 1],\n        'n_out' : settings['n_outs'],\n        'activation' : math.sigmoid\n    });\n};\n\nDBN.prototype.pretrain = function (settings) {\n    var self = this;\n    var lr = 0.6, k = 1, epochs = 2000;\n    if(typeof settings['lr'] !== 'undefined')\n        lr = settings['lr'];\n    if(typeof settings['k'] !== 'undefined')\n        k = settings['k'];\n    if(typeof settings['epochs'] !== 'undefined')\n        epochs = settings['epochs'];\n\n    var i,j;\n    for(i=0; i<self.nLayers ; i++) {\n        var layerInput ,rbm;\n        if (i==0)\n            layerInput = self.x;\n        else\n            layerInput = self.sigmoidLayers[i-1].sampleHgivenV(layerInput);\n        rbm = self.rbmLayers[i];\n        rbm.set('log level',0);\n        rbm.train({\n            'lr' : lr,\n            'k' : k,\n            'input' : layerInput,\n            'epochs' : epochs\n        });\n\n        if(self.settings['log level'] > 0) {\n            console.log(\"DBN RBM\",i,\"th Layer Final Cross Entropy: \",rbm.getReconstructionCrossEntropy());\n            console.log(\"DBN RBM\",i,\"th Layer Pre-Training Completed.\");\n        }\n\n        // Synchronization between RBM and sigmoid Layer\n        self.sigmoidLayers[i].W = rbm.W;\n        self.sigmoidLayers[i].b = rbm.hbias;\n    }\n    if(self.settings['log level'] > 0)\n        console.log(\"DBN Pre-Training Completed.\")\n};\n\nDBN.prototype.finetune = function (settings) {\n    var self = this;\n    var lr = 0.2, epochs = 1000;\n    if(typeof settings['lr'] !== 'undefined')\n        lr = settings['lr'];\n    if(typeof settings['epochs'] !== 'undefined')\n        epochs = settings['epochs'];\n\n    //Fine-Tuning Using MLP (Back Propagation)\n    var i;\n    var pretrainedWArray = [], pretrainedBArray = []; // HiddenLayer W,b values already pretrained by RBM.\n    for(i=0; i<self.nLayers ; i++) {\n        pretrainedWArray.push(self.sigmoidLayers[i].W);\n        pretrainedBArray.push(self.sigmoidLayers[i].b);\n    }\n    // W,b of Final Output Layer are not involved in pretrainedWArray, pretrainedBArray so they will be treated as undefined at MLP Constructor.\n    var mlp = new MLP({\n        'input' : self.x,\n        'label' : self.y,\n        'n_ins' : self.nIns,\n        'n_outs' : self.nOuts,\n        'hidden_layer_sizes' : self.hiddenLayerSizes,\n        'w_array' : pretrainedWArray,\n        'b_array' : pretrainedBArray\n    });\n    mlp.set('log level',self.settings['log level']);\n    mlp.train({\n        'lr' : lr,\n        'epochs' : epochs\n    });\n    for(i=0; i<self.nLayers ; i++) {\n        self.sigmoidLayers[i].W = mlp.sigmoidLayers[i].W;\n        self.sigmoidLayers[i].b = mlp.sigmoidLayers[i].b;\n    }\n    self.outputLayer.W = mlp.sigmoidLayers[self.nLayers].W;\n    self.outputLayer.b = mlp.sigmoidLayers[self.nLayers].b;\n\n};\n\nDBN.prototype.getReconstructionCrossEntropy = function() {\n    var self = this;\n    var reconstructedOutput = self.predict(self.x);\n    var a = math.activateTwoMat(self.y,reconstructedOutput,function(x,y){\n        return x*Math.log(y);\n    });\n\n    var b = math.activateTwoMat(self.y,reconstructedOutput,function(x,y){\n        return (1-x)*Math.log(1-y);\n    });\n\n    var crossEntropy = -math.meanVec(math.sumMatAxis(math.addMat(a,b),1));\n    return crossEntropy\n};\n\nDBN.prototype.predict = function (x) {\n    var self = this;\n    var layerInput = x, i;\n    for(i=0; i<self.nLayers ; i++) {\n        layerInput = self.sigmoidLayers[i].output(layerInput);\n    }\n    var output = self.outputLayer.output(layerInput);\n    return output;\n};\n\nDBN.prototype.set = function(property,value) {\n    var self = this;\n    self.settings[property] = value;\n}","/home/travis/build/npmtest/node-npmtest-dnn/node_modules/dnn/lib/HiddenLayer.js":"/**\n * Created by joonkukang on 2014. 1. 12..\n */\nvar math = require('./utils').math;\nHiddenLayer = module.exports = function (settings) {\n    var self = this;\n    self.input = settings['input'];\n\n    if(typeof settings['W'] === 'undefined') {\n        var a = 1. / settings['n_in'];\n        settings['W'] = math.randMat(settings['n_in'],settings['n_out'],-a,a);\n    }\n    if(typeof settings['b'] === 'undefined')\n        settings['b'] = math.zeroVec(settings['n_out']);\n    if(typeof settings['activation'] === 'undefined')\n        settings['activation'] = math.sigmoid;\n\n    self.W = settings['W'];\n    self.b = settings['b'];\n    self.activation = settings['activation'];\n}\n\nHiddenLayer.prototype.output = function(input) {\n    var self = this;\n    if(typeof input !== 'undefined')\n        self.input = input;\n\n    var linearOutput = math.addMatVec(math.mulMat(self.input,self.W),self.b);\n    return math.activateMat(linearOutput,self.activation);\n};\n\nHiddenLayer.prototype.linearOutput = function(input) { // returns the value before activation.\n    var self = this;\n    if(typeof input !== 'undefined')\n        self.input = input;\n\n    var linearOutput = math.addMatVec(math.mulMat(self.input,self.W),self.b);\n    return linearOutput;\n}\n\nHiddenLayer.prototype.backPropagate = function (input) { // example+num * n_out matrix\n    var self = this;\n    if(typeof input === 'undefined')\n        throw new Error(\"No BackPropagation Input.\")\n\n    var linearOutput = math.mulMat(input, m.transpose(self.W));\n    return linearOutput;\n}\n\nHiddenLayer.prototype.sampleHgivenV = function(input) {\n    var self = this;\n    if(typeof input !== 'undefined')\n        self.input = input;\n\n    var hMean = self.output();\n    var hSample = math.probToBinaryMat(hMean);\n    return hSample;\n}","/home/travis/build/npmtest/node-npmtest-dnn/node_modules/dnn/lib/MLP.js":"/**\n * Created by joonkukang on 2014. 1. 14..\n */\nvar math = require('./utils').math;\n\nMLP = module.exports = function (settings) {\n    var self = this;\n    self.x = settings['input'];\n    self.y = settings['label'];\n    self.sigmoidLayers = [];\n    self.nLayers = settings['hidden_layer_sizes'].length;\n    self.settings = {\n        'log level' : 1 // 0 : nothing, 1 : info, 2: warn\n    };\n    var i;\n    for(i=0 ; i<self.nLayers+1 ; i++) {\n        var inputSize, layerInput;\n        if(i == 0)\n            inputSize = settings['n_ins'];\n        else\n            inputSize = settings['hidden_layer_sizes'][i-1];\n\n        if(i == 0)\n            layerInput = self.x;\n        else\n            layerInput = self.sigmoidLayers[self.sigmoidLayers.length-1].sampleHgivenV();\n\n        var sigmoidLayer;\n        if(i == self.nLayers) {\n            sigmoidLayer = new HiddenLayer({\n                'input' : layerInput,\n                'n_in' : inputSize,\n                'n_out' : settings['n_outs'],\n                'activation' : math.sigmoid,\n                'W' : (typeof settings['w_array'] === 'undefined')? undefined : settings['w_array'][i],\n                'b' : (typeof settings['b_array'] === 'undefined')? undefined : settings['b_array'][i]\n            });\n        } else {\n            sigmoidLayer = new HiddenLayer({\n                'input' : layerInput,\n                'n_in' : inputSize,\n                'n_out' : settings['hidden_layer_sizes'][i],\n                'activation' : math.sigmoid,\n                'W' : (typeof settings['w_array'] === 'undefined')? undefined : settings['w_array'][i],\n                'b' : (typeof settings['b_array'] === 'undefined')? undefined : settings['b_array'][i]\n            });\n        }\n        self.sigmoidLayers.push(sigmoidLayer);\n    }\n};\n\nMLP.prototype.train = function(settings) {\n    var self = this;\n    var lr = 0.6, epochs = 1000;\n    if(typeof settings['lr'] !== 'undefined')\n        lr = settings['lr'];\n    if(typeof settings['epochs'] !== 'undefined')\n        epochs = settings['epochs'];\n\n\n    var epoch;\n    var currentProgress = 1;\n    for(epoch=0 ; epoch < epochs ; epoch++) {\n\n        // Feed Forward\n        var i;\n        var layerInput = [];\n        layerInput.push(self.x);\n        for(i=0; i<self.nLayers+1 ; i++) {\n            layerInput.push(self.sigmoidLayers[i].output(layerInput[i]));\n        }\n        var output = layerInput[self.nLayers+1];\n        // Back Propagation\n        var delta = new Array(self.nLayers + 1);\n        delta[self.nLayers] = m.mulMatElementWise(m.minusMat(self.y, output),\n            m.activateMat(self.sigmoidLayers[self.nLayers].linearOutput(layerInput[self.nLayers]), m.dSigmoid));\n\n        /*\n         self.nLayers = 3 (3 hidden layers)\n         delta[3] : ouput layer\n         delta[2] : 3rd hidden layer, delta[0] : 1st hidden layer\n         */\n        for(i = self.nLayers - 1; i>=0 ; i--) {\n            delta[i] = m.mulMatElementWise(self.sigmoidLayers[i+1].backPropagate(delta[i+1]),\n                m.activateMat(self.sigmoidLayers[i].linearOutput(layerInput[i]), m.dSigmoid));\n        }\n        // Update Weight, Bias\n        for(var i=0; i<self.nLayers+1 ; i++) {\n            var deltaW = m.activateMat(m.mulMat(m.transpose(layerInput[i]),delta[i]),function(x){return 1. * x / self.x.length;})\n            var deltaB = m.meanMatAxis(delta[i],0);\n            self.sigmoidLayers[i].W = m.addMat(self.sigmoidLayers[i].W,deltaW);\n            self.sigmoidLayers[i].b = m.addVec(self.sigmoidLayers[i].b,deltaB);\n        }\n\n        if(self.settings['log level'] > 0) {\n            var progress = (1.*epoch/epochs)*100;\n            if(progress > currentProgress) {\n                console.log(\"MLP\",progress.toFixed(0),\"% Completed.\");\n                currentProgress+=8;\n            }\n        }\n    }\n    if(self.settings['log level'] > 0)\n        console.log(\"MLP Final Cross Entropy : \",self.getReconstructionCrossEntropy());\n};\n\nMLP.prototype.getReconstructionCrossEntropy = function() {\n    var self = this;\n    var reconstructedOutput = self.predict(self.x);\n    var a = math.activateTwoMat(self.y,reconstructedOutput,function(x,y){\n        return x*Math.log(y);\n    });\n\n    var b = math.activateTwoMat(self.y,reconstructedOutput,function(x,y){\n        return (1-x)*Math.log(1-y);\n    });\n\n    var crossEntropy = -math.meanVec(math.sumMatAxis(math.addMat(a,b),1));\n    return crossEntropy\n}\n\nMLP.prototype.predict = function(x) {\n    var self = this;\n    var output = x;\n    for(i=0; i<self.nLayers+1 ; i++) {\n        output = self.sigmoidLayers[i].output(output);\n    }\n    return output;\n};\n\nMLP.prototype.set = function(property,value) {\n    var self = this;\n    self.settings[property] = value;\n}","/home/travis/build/npmtest/node-npmtest-dnn/node_modules/dnn/lib/CRBM.js":"/**\n * Created by joonkukang on 2014. 1. 13..\n */\n\nvar math = require('./utils').math;\nRBM = require('./RBM');\n\nCRBM = module.exports = function (settings) {\n    RBM.call(this,settings);\n};\n\nCRBM.prototype = new RBM({});\n\nCRBM.prototype.propdown = function(h) {\n    var self = this;\n    var preSigmoidActivation = math.addMatVec(math.mulMat(h,math.transpose(self.W)),self.vbias);\n    return preSigmoidActivation;\n};\n\nCRBM.prototype.sampleVgivenH = function(h0_sample) {\n    var self = this;\n    var a_h = self.propdown(h0_sample);\n    var a = math.activateMat(a_h,function(x) { return 1. / (1-Math.exp(-x)) ; });\n    var b = math.activateMat(a_h,function(x){ return 1./x ;});\n    var v1_mean = math.minusMat(a,b);\n    var U = math.randMat(math.shape(v1_mean)[0],math.shape(v1_mean)[1],0,1);\n    var c = math.activateMat(a_h,function(x) { return 1 - Math.exp(x);});\n    var d = math.activateMat(math.mulMatElementWise(U,c),function(x) {return 1-x;});\n    var v1_sample = math.activateTwoMat(math.activateMat(d,Math.log),a_h,function(x,y) {\n        if(y==0) y += 1e-14; // Javascript Float Precision Problem.. This is a limit of javascript.\n        return x/y;\n    })\n    return [v1_mean,v1_sample];\n};\nCRBM.prototype.getReconstructionCrossEntropy = function() {\n    var self = this;\n    var reconstructedV = self.reconstruct(self.input);\n    var a = math.activateTwoMat(self.input,reconstructedV,function(x,y){\n        return x*Math.log(y);\n    });\n\n    var b = math.activateTwoMat(self.input,reconstructedV,function(x,y){\n        return (1-x)*Math.log(1-y);\n    });\n\n    var crossEntropy = -math.meanVec(math.sumMatAxis(math.addMat(a,b),1));\n    return crossEntropy;\n\n};\n\nCRBM.prototype.reconstruct = function(v) {\n    var self = this;\n    var reconstructedV = self.sampleVgivenH(self.sampleHgivenV(v)[0])[0];\n    return reconstructedV;\n};","/home/travis/build/npmtest/node-npmtest-dnn/node_modules/dnn/lib/CDBN.js":"/**\n * Created by joonkukang on 2014. 1. 13..\n */\nvar math = require('./utils').math;\nLogisticRegression = require('./LogisticRegression');\nHiddenLayer = require('./HiddenLayer');\nRBM = require('./RBM');\nCRBM = require('./CRBM');\nDBN = require('./DBN');\n\n\nCDBN = module.exports = function (settings) {\n    var self = this;\n    self.x = settings['input'];\n    self.y = settings['label'];\n    self.sigmoidLayers = [];\n    self.rbmLayers = [];\n    self.nLayers = settings['hidden_layer_sizes'].length;\n    self.hiddenLayerSizes = settings['hidden_layer_sizes'];\n    self.nIns = settings['n_ins'];\n    self.nOuts = settings['n_outs'];\n\n    self.settings = {\n        'log level' : 1 // 0 : nothing, 1 : info, 2: warn\n    };\n    // Constructing Deep Neural Network\n    var i;\n    for(i=0 ; i<self.nLayers ; i++) {\n        var inputSize, layerInput;\n        if(i == 0)\n            inputSize = settings['n_ins'];\n        else\n            inputSize = settings['hidden_layer_sizes'][i-1];\n\n        if(i == 0)\n            layerInput = self.x;\n        else\n            layerInput = self.sigmoidLayers[self.sigmoidLayers.length-1].sampleHgivenV();\n\n        var sigmoidLayer = new HiddenLayer({\n            'input' : layerInput,\n            'n_in' : inputSize,\n            'n_out' : settings['hidden_layer_sizes'][i],\n            'activation' : math.sigmoid\n        });\n        self.sigmoidLayers.push(sigmoidLayer);\n\n        var rbmLayer;\n        if(i==0) {\n            rbmLayer = new CRBM({\n                'input' : layerInput,\n                'n_visible' : inputSize,\n                'n_hidden' : settings['hidden_layer_sizes'][i],\n            });\n        } else {\n            rbmLayer = new RBM({\n                'input' : layerInput,\n                'n_visible' : inputSize,\n                'n_hidden' : settings['hidden_layer_sizes'][i]\n            });\n        }\n        self.rbmLayers.push(rbmLayer);\n    }\n    self.outputLayer = new HiddenLayer({\n        'input' : self.sigmoidLayers[self.sigmoidLayers.length-1].sampleHgivenV(),\n        'n_in' : settings['hidden_layer_sizes'][settings['hidden_layer_sizes'].length - 1],\n        'n_out' : settings['n_outs'],\n        'activation' : math.sigmoid\n    });\n};\n\nCDBN.prototype.__proto__ = DBN.prototype;"}